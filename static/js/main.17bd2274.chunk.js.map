{"version":3,"sources":["constants/constant.tsx","models/action.tsx","utils/utils.tsx","reducer/configReducer.tsx","store/store.tsx","components/header/Header.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["GAME_STATUS","Difficulty","GAME_MSGS","GREAT_MOVE","ON_GOING_MSGS","WON","LOST","MAX_DIM_LENGTH","ERROR","MORE_BOMBS","LESS_BOMS","GRID_ERROR","MAX_DIM","getGameConfigByDificulty","level","Easy","config","gridSize","m","n","bombInTheGame","Medium","Hard","Custom","VISITED_CELL","GAME_STATE_CHANGED","CHOOSE_GRID","createGameStateAction","type","payload","getRandomNum","length","Math","floor","random","countBombsNearCells","grid","rowIndex","row","colIndex","totalBombs","initialState","getinitialState","visitedCells","gameStatus","GAME_NOT_STARTED","getInitialGameBoard","totalCells","gridCells","randomIndex","shuffleGrid","Array","fill","scan","index","cell","push","configReducer","state","action","storeModel","gameConfig","createContext","Provider","GameConfigContainer","children","useReducer","dispatch","value","Header","className","GameBoard","lazy","DesignGame","App","useContext","useState","msg","setMsg","useEffect","GAME_IN_PROGRESS","GAME_WON","GAME_LOST","onClick","GAME_CONFIG_STATE","fallback","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.17bd2274.chunk.js","sourcesContent":["import Config from '../models/config';\n\nenum GAME_STATUS {\n    GAME_NOT_STARTED = \"GAME_NOT_STARTED\",\n    GAME_CONFIG_STATE = \"GAME_CONFIG_STATE\",\n    GAME_IN_PROGRESS = \"GAME_IN_PROGRESS\",\n    GAME_LOST = \"GAME_LOST\",\n    GAME_WON = \"GAME_WON\"\n}\n\nenum Difficulty {\n    Easy = 1,\n    Medium,\n    Hard,\n    Custom\n}\n\nconst GAME_MSGS = {\n    GREAT_MOVE: \"Great choice. You can select any adjacent cell.\",\n    ON_GOING_MSGS: [\"Keep going. You are almost there.\", \"Nice choice.\", \"Be careful on your choice.\", \"You were lucky\"],\n    WON: \"Congratuation, you have won the game. Try more difficult level.\",\n    LOST: \"Hard luck. You lost the game. Keep clicking on the cells to know remaining bombs or click on the New Game button to try again.\"\n}\n\nconst getGameConfigByDificulty = (level: Difficulty = Difficulty.Easy): Config => {\n    let config: Config = {\n        gridSize: {\n            m: 5,\n            n: 5\n        },\n        bombInTheGame: 5\n    };\n\n    switch (level) {\n        case Difficulty.Medium:\n            config = {\n                gridSize: {\n                    m: 10,\n                    n: 10\n                },\n                bombInTheGame: 20\n            };\n            break;\n\n        case Difficulty.Hard:\n            config = {\n                gridSize: {\n                    m: 15,\n                    n: 15\n                },\n                bombInTheGame: 45\n            };\n            break;\n        case Difficulty.Custom:\n            config = {\n                gridSize: {\n                    m: 10,\n                    n: 10\n                },\n                bombInTheGame: 20\n            };\n            break;\n    }\n    return config;\n}\n\nexport const MAX_DIM_LENGTH = 30;\n\nexport const ERROR = {\n    MORE_BOMBS : \"Invalid Game Board. Number of bombs can not be more than or equal to cells\",\n    LESS_BOMS: \"Invalid Game Board. There should be atleast 1 bomb in the board.\",\n    GRID_ERROR: \"Invalid Game Board. There should be atleast 2 cells in the board.\",\n    MAX_DIM: `Invalid Game Board. You can choose maximum ${MAX_DIM_LENGTH} row or column`\n} \n\n\n\nexport default getGameConfigByDificulty;\n\nexport { GAME_STATUS, Difficulty, GAME_MSGS };","interface GameActionPayload {\n    type: string\n    payload: any\n}\n\nconst VISITED_CELL = \"VISITED_CELL\";\nconst GAME_STATE_CHANGED = \"GAME_STATE_CHANGED\";\nconst CHOOSE_GRID = \"CHOOSE_GRID\"\n\nconst createGameStateAction = (type: string, payload:any): GameActionPayload => {\n    return { type: type, payload: payload }\n}\n\nexport default GameActionPayload;\nexport { VISITED_CELL, GAME_STATE_CHANGED, createGameStateAction, CHOOSE_GRID }","import Config from \"../models/config\";\nimport getGameConfigByDificulty, { Difficulty, GAME_STATUS } from \"../constants/constant\";\nimport StoreModel from \"../models/store\";\n\nconst shuffleGrid = (grid: number[], bombInTheGame: number) => {\n    while (bombInTheGame) {\n        const randomIndex: number = getRandomNum(grid.length);\n        if (grid[randomIndex] !== -1) {\n            grid[randomIndex] = -1;\n            bombInTheGame--;\n        }\n    }\n    return grid;\n}\n\nexport const getRandomNum = (length:number)=>{\n    return (Math.floor(Math.random() * length));\n}\n\nconst getInitialGameBoard = (config: Config) => {\n    const totalCells = config.gridSize.m * config.gridSize.n;\n    const totalCellsArr: number[] = new Array(totalCells).fill(0);\n    const gridCells = shuffleGrid(totalCellsArr, config.bombInTheGame);\n\n    const grid = [];\n    let scan = 0;\n    for (let rowIndex = 0; rowIndex < config.gridSize.m; rowIndex++) {\n        const row = [];\n        for (let index = 0; index < config.gridSize.n; index++) {\n            const cell = gridCells[scan++];\n            row.push(cell);\n        }\n        grid.push(row);\n    }\n    return grid;\n}\n\nexport const countBombsNearCells = (grid: any) => {\n    for (let rowIndex = 0; rowIndex < grid.length; rowIndex++) {\n        const row = grid[rowIndex];\n        for (let colIndex = 0; colIndex < row.length; colIndex++) {\n            let totalBombs = 0;\n            if (grid[rowIndex][colIndex] !== -1) {\n                if (colIndex - 1 >= 0 && grid[rowIndex][colIndex - 1] === -1) // Left cell\n                    totalBombs++;\n                if (colIndex + 1 < row.length && grid[rowIndex][colIndex + 1] === -1) // Right cell\n                    totalBombs++;\n                if (rowIndex + 1 < grid.length && grid[rowIndex + 1][colIndex] === -1) // Bottom cell\n                    totalBombs++;\n                if (rowIndex - 1 >= 0 && grid[rowIndex - 1][colIndex] === -1) // Top cell\n                    totalBombs++;\n                if (rowIndex - 1 >= 0 && colIndex - 1 >= 0 && grid[rowIndex - 1][colIndex - 1] === -1) // Top left cell\n                    totalBombs++;\n                if (rowIndex - 1 >= 0 && colIndex + 1 < row.length && grid[rowIndex - 1][colIndex + 1] === -1) // Top right cell\n                    totalBombs++;\n                if (rowIndex + 1 < grid.length && colIndex - 1 >= 0 && grid[rowIndex + 1][colIndex - 1] === -1) // Bottom left cell\n                    totalBombs++;\n                if (rowIndex + 1 < grid.length && colIndex + 1 < row.length && grid[rowIndex + 1][colIndex + 1] === -1) // Bottom left cell\n                    totalBombs++;\n                grid[rowIndex][colIndex] = totalBombs;\n            }\n        }\n    }\n    return grid;\n}\n\nexport const initialState = getGameConfigByDificulty(Difficulty.Easy);\nexport const getinitialState = ():StoreModel => {\n    return { config: { ...initialState }, visitedCells: 0, gameStatus: GAME_STATUS.GAME_NOT_STARTED };\n}\n\nexport default getInitialGameBoard;","import GameActionPayload, { VISITED_CELL, GAME_STATE_CHANGED, CHOOSE_GRID } from \"../models/action\";\nimport { getinitialState } from \"../utils/utils\";\nimport StoreModel from \"../models/store\";\n\nconst configReducer = (state: StoreModel = getinitialState(), action: GameActionPayload): StoreModel => {\n    switch (action.type) {\n        case VISITED_CELL:\n            state = { ...state };\n            state.visitedCells = state.visitedCells + 1;\n            break;\n        case GAME_STATE_CHANGED:\n            state = { ...state };\n            state.gameStatus = action.payload;\n            break;\n        case CHOOSE_GRID:\n            state = { ...state };\n            state.config = action.payload;\n            state.visitedCells = 0;\n            break;\n    }\n    return state;\n}\n\nexport default configReducer;","import React, { createContext, useReducer } from 'react';\nimport configReducer from '../reducer/configReducer';\nimport StoreModel from '../models/store';\nimport { getinitialState } from '../utils/utils';\n\nconst storeModel: StoreModel = getinitialState();\nconst gameConfig = createContext({ ...storeModel });\nconst { Provider } = gameConfig;\n\nconst GameConfigContainer = ({ children }: any) => {\n    const [state, dispatch] = useReducer(configReducer, storeModel);\n    return <Provider value={ { config: state.config, dispatch: dispatch, visitedCells: state.visitedCells, gameStatus: state.gameStatus } }>{children}</Provider>;\n}\n\nexport { gameConfig, GameConfigContainer };","import React from 'react';\nimport \"./Header.css\"\n\n const Header = () => {\n    return (<header className=\"header\">\n            <h2>Welcome To Minesweeper</h2>\n        </header>)\n}\n\nexport default Header;","import React, { useState, useContext, useEffect, lazy, Suspense } from 'react';\nimport './App.css';\nimport Header from './components/header/Header';\nimport { gameConfig } from './store/store';\nimport { GAME_STATUS, GAME_MSGS } from './constants/constant';\nimport { getRandomNum } from './utils/utils';\nimport { createGameStateAction, GAME_STATE_CHANGED } from './models/action';\n\n\nconst GameBoard = lazy(() => import('./components/gameboard/GameBoard'));\nconst DesignGame = lazy(() => import(\"./components/desingGame/DesignGame\"));\n\nconst App = () => {\n  const { visitedCells, gameStatus, dispatch } = useContext(gameConfig);\n  const [msg, setMsg] = useState(\"Click on the New Game button to start a game\");\n  useEffect(() => {\n    if (gameStatus === GAME_STATUS.GAME_IN_PROGRESS && visitedCells > 0) {\n      setMsg(GAME_MSGS.ON_GOING_MSGS[getRandomNum(GAME_MSGS.ON_GOING_MSGS.length)]);\n    }\n  }, [visitedCells]);\n\n  useEffect(() => {\n    if (gameStatus === GAME_STATUS.GAME_WON)\n      setMsg(GAME_MSGS.WON);\n    if (gameStatus === GAME_STATUS.GAME_LOST)\n      setMsg(GAME_MSGS.LOST);\n    if (gameStatus === GAME_STATUS.GAME_IN_PROGRESS && visitedCells === 0)\n        setMsg(\"Good luck!!, Make a choice.\");\n  }, [gameStatus])\n\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <h4 className=\"fadeEffect\">{msg}</h4>\n      {\n        gameStatus === GAME_STATUS.GAME_NOT_STARTED || gameStatus === GAME_STATUS.GAME_WON || gameStatus === GAME_STATUS.GAME_LOST ? <button onClick={() => {\n          if (dispatch) {\n            setMsg(\"\");\n            dispatch(createGameStateAction(GAME_STATE_CHANGED, GAME_STATUS.GAME_CONFIG_STATE));\n          }\n        }}>New Game</button> : \"\"\n      }\n      <Suspense fallback={<div>Loading...</div>}>\n        {\n          gameStatus === GAME_STATUS.GAME_CONFIG_STATE ? <DesignGame /> : \"\"\n        }\n        {\n          gameStatus === GAME_STATUS.GAME_IN_PROGRESS || gameStatus === GAME_STATUS.GAME_WON || gameStatus === GAME_STATUS.GAME_LOST ? <GameBoard /> : \"\"\n        }\n      </Suspense>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { GameConfigContainer } from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GameConfigContainer>\n      <App />\n    </GameConfigContainer>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}